Case Study #1 - Danny's Diner

This is part of the 8 week SQL challenge        https://8weeksqlchallenge.com/case-study-1/ 

Introduction

Danny seriously loves Japanese food so in the beginning of 2021, he decides to embark upon a risky venture and opens up a cute little restaurant
that sells his 3 favourite foods: sushi, curry and ramen.
Danny’s Diner is in need of your assistance to help the restaurant stay afloat - the restaurant has captured some very basic data from their few
months of operation but have no idea how to use their data to help them run the business.

Problem Statement

Danny wants to use the data to answer a few simple questions about his customers, especially about their visiting patterns, how much money they’ve
spent and also which menu items are their favourite. Having this deeper connection with his customers will help him deliver a better and more 
personalised experience for his loyal customers.
He plans on using these insights to help him decide whether he should expand the existing customer loyalty program - additionally he needs help
to generate some basic datasets so his team can easily inspect the data without needing to use SQL.
Danny has provided you with a sample of his overall customer data due to privacy issues - but he hopes that these examples are enough for you to
write fully functioning SQL queries to help him answer his questions!

Danny has shared with you 3 key datasets for this case study:
•	sales
•	menu
•	members




CREATE TABLE dannys_diner.sales (
  customer_id STRING(1),
  order_date DATE,
  product_id INT64
);

INSERT INTO dannys_diner.sales
  (customer_id, order_date, product_id)
VALUES
  ('A', '2021-01-01', 1),
  ('A', '2021-01-01', 2),
  ('A', '2021-01-07', 2),
  ('A', '2021-01-10', 3),
  ('A', '2021-01-11', 3),
  ('A', '2021-01-11', 3),
  ('B', '2021-01-01', 2),
  ('B', '2021-01-02', 2),
  ('B', '2021-01-04', 1),
  ('B', '2021-01-11', 1),
  ('B', '2021-01-16', 3),
  ('B', '2021-02-01', 3),
  ('C', '2021-01-01', 3),
  ('C', '2021-01-01', 3),
  ('C', '2021-01-07', 3);




CREATE TABLE dannys_diner.menu (
  product_id INT64,
  product_name STRING(5),
  price INT64
);

INSERT INTO dannys_diner.menu
  (product_id, product_name, price)
VALUES
  (1, 'sushi', 10),
  (2, 'curry', 15),
  (3, 'ramen', 12);
  



CREATE TABLE dannys_diner.members (
  customer_id STRING(1),
  join_date DATE
);

INSERT INTO dannys_diner.members
  (customer_id, join_date)
VALUES
  ('A', '2021-01-07'),
  ('B', '2021-01-09');


-- 1. What is the total amount each customer spent at the restaurant?

SELECT customer_id, sum(price) as total_spent
FROM `dannys_diner.sales` s
 JOIN `dannys_diner.menu` m
 ON s.product_id = m.product_id
GROUP BY customer_id

 
-- 2. How many days has each customer visited the restaurant?

SELECT 
  customer_id, count(distinct(order_date)) as days_count
FROM
  `dannys_diner.sales`
GROUP BY customer_id

 
-- 3. What was the first item from the menu purchased by each customer?

SELECT customer_id, product_name, rankinG
FROM
(
SELECT
  customer_id, order_date, product_name,
  rank() over( partition by customer_id
  order by order_date) as ranking
FROM `dannys_diner.sales` s
JOIN `dannys_diner.menu` m
  ON s.product_id = m.product_id
ORDER BY 1, 2
)
WHERE ranking = 1
GROUP BY 1, 2, 3
ORDER BY 1

 
-- 4. What is the most purchased item on the menu and how many times was it purchased by all customers?

SELECT
  product_name, count(s.product_id) as purchases_count
FROM `dannys_diner.menu` m
JOIN `dannys_diner.sales` s
ON m.product_id = s.product_id
GROUP BY 1
ORDER BY 2 desc
LIMIT 1

 
SELECT
  customer_id, product_name, count(s.product_id) as purchases_count
FROM `dannys_diner.menu` m
JOIN `dannys_diner.sales` s
ON m.product_id = s.product_id
WHERE s.product_id = 3
GROUP BY 1, 2
ORDER BY 2 desc

 

-- 5. Which item was the most popular for each customer?

WITH ranking_sales as (
SELECT
  customer_id, s.product_id, count(s.product_id) as count_meals, product_name,
  rank() over(partition by customer_id order by count(s.product_id) desc) as ranking
FROM `dannys_diner.menu` m
JOIN `dannys_diner.sales` s
ON m.product_id = s.product_id
GROUP BY 1, 2, 4
ORDER BY 1, 3 DESC )
SELECT customer_id, product_name, ranking_sales.count_meals
FROM ranking_sales
WHERE ranking = 1

 
-- 6. Which item was purchased first by the customer after they became a member?

SELECT 
  customer_id, join_date, order_date, product_name
FROM
(SELECT ss.customer_id,
       order_date,
       ss.product_id,
       product_name,
       join_date,
       rank() over(partition by ss.customer_id order by order_date) as ranking  
FROM `dannys_diner.menu` mu
JOIN `dannys_diner.sales` ss on mu.product_id = ss.product_id
JOIN `dannys_diner.members` ms on ms.customer_id = ss.customer_id
WHERE ss.order_date >= join_date
ORDER BY 1,2) 
WHERE ranking = 1

 

-- 7. Which item was purchased just before the customer became a member?

SELECT
   customer_id, join_date, order_date, product_name
FROM 
(SELECT ss.customer_id,
       order_date,
       ss.product_id,
       product_name,
       join_date,
       rank() over(partition by ss.customer_id order by order_date desc) as ranking  
FROM `dannys_diner.menu` mu
JOIN `dannys_diner.sales` ss on mu.product_id = ss.product_id
JOIN `dannys_diner.members` ms on ms.customer_id = ss.customer_id
WHERE ss.order_date < join_date
ORDER BY 1,2 desc)
WHERE ranking = 1

 

-- 8. What is the total items and amount spent for each member before they became a member?

SELECT ss.customer_id, count(ss.product_id) count_items,
       sum(price) total_amount
FROM `dannys_diner.menu` mu
JOIN `dannys_diner.sales` ss 
    on mu.product_id = ss.product_id
JOIN `dannys_diner.members` ms 
    on ms.customer_id = ss.customer_id
WHERE ss.order_date < join_date
GROUP BY 1

 
-- 9.  If each $1 spent equates to 10 points and sushi has a 2x points multiplier - how many points would each customer have?

WITH points_data as (
SELECT 
  customer_id,
  s.product_id, 
  case when s.product_id = 1 then price*20
       else price*10
       end as points
FROM `dannys_diner.sales` s
JOIN `dannys_diner.menu` m 
ON s.product_id = m.product_id )
SELECT
  customer_id,
  sum(points) as total_points
FROM points_data
GROUP BY customer_id

 

-- 10. In the first week after a customer joins the program (including their join date) they earn 2x points on all items, not just sushi - how many points do customer A and B have at the end of January?


SELECT customer_id,
       join_date,
       join_week,
       sum( case when order_date between join_date and join_week then price*20
                 when product_name = 'sushi' then price*20
                 else price*10
                 end) as Points
FROM
(SELECT s.customer_id,
       join_date,
       date_add(join_date, interval 6 day) as join_week,
       order_date,
       product_name,
       price 
FROM `dannys_diner.members` ms
JOIN `dannys_diner.sales` s 
     on ms.customer_id = s.customer_id
JOIN `dannys_diner.menu` m
     on s.product_id = m.product_id
WHERE order_date >= join_date
)
WHERE order_date <= '2021-01-31'
GROUP BY 1,2,3
ORDER BY 1 

 
