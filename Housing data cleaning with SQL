
-- This is a data cleaning process for the Nashville Housing Dataset with SQL queries

-- Let's take a look at our data

SELECT *
FROM NashvilleHousing


-- Standarize date format --------------------------------------------------------------------------------------------

UPDATE NashvilleHousing
SET SaleDate = CONVERT(DATE, SaleDate)     -- It Does not work 


ALTER TABLE NashvilleHousing
ADD SaleDateConverted date


UPDATE NashvilleHousing
SET SaleDateConverted = CONVERT(DATE, SaleDate)


ALTER TABLE NashvilleHousing
DROP COLUMN SaleDate


-- Populate property address data --------------------------------------------------------------------------------------

SELECT a.PropertyAddress, a.ParcelID, b.PropertyAddress, b.ParcelID, ISNULL(a.PropertyAddress, b.PropertyAddress) 
FROM NashvilleHousing a
JOIN NashvilleHousing b
	on a.ParcelID = b.ParcelID
	and a.[UniqueID ] <> b.[UniqueID ]
WHERE a.PropertyAddress is null


UPDATE a
SET PropertyAddress = ISNULL(a.PropertyAddress, b.PropertyAddress)
FROM NashvilleHousing a
JOIN NashvilleHousing b
	on a.ParcelID = b.ParcelID
	and a.[UniqueID ] <> b.[UniqueID ]
WHERE a.PropertyAddress is null


-- Breaking out address into individual columns ----------------------------------------------------------------------------

SELECT
	SUBSTRING(PropertyAddress, 1, CHARINDEX(',',PropertyAddress) -1) as Address,
	SUBSTRING(PropertyAddress, CHARINDEX(',',PropertyAddress) +1, LEN(PropertyAddress)) as City
FROM NashvilleHousing


ALTER TABLE NashvilleHousing
ADD PropertyAddress_ok varchar(250)

UPDATE NashvilleHousing
SET PropertyAddress_ok = SUBSTRING(PropertyAddress, 1, CHARINDEX(',',PropertyAddress) -1)

ALTER TABLE NashvilleHousing
ADD PropertyCity_ok varchar(250)

UPDATE NashvilleHousing
SET PropertyCity_ok = SUBSTRING(PropertyAddress, CHARINDEX(',',PropertyAddress) +1, LEN(PropertyAddress))




SELECT
	PARSENAME(REPLACE(OwnerAddress, ',','.'),3) Address,
	PARSENAME(REPLACE(OwnerAddress, ',','.'),2) City,
	PARSENAME(REPLACE(OwnerAddress, ',','.'),1) State
FROM NashvilleHousing


ALTER TABLE NashvilleHousing
ADD OwnerAddress_ok varchar(250)

UPDATE NashvilleHousing
SET OwnerAddress_ok = PARSENAME(REPLACE(OwnerAddress, ',','.'),3)

ALTER TABLE NashvilleHousing
ADD OwnerCity_ok varchar(250)

UPDATE NashvilleHousing
SET OwnerCity_ok = PARSENAME(REPLACE(OwnerAddress, ',','.'),2)

ALTER TABLE NashvilleHousing
ADD OwnerState_ok varchar(250)

UPDATE NashvilleHousing
SET OwnerState_ok = PARSENAME(REPLACE(OwnerAddress, ',','.'),1)





-- Change Y and N to Yes and No in "Sold as Vacant" column -------------------------------------------------------------------------


SELECT SoldAsVacant, COUNT(SoldAsVacant)
FROM NashvilleHousing
GROUP BY SoldAsVacant


SELECT 
	CASE SoldAsVacant
	WHEN 'Y' THEN 'Yes'
	WHEN 'N' THEN 'No'
	ELSE SoldAsVacant
	END
FROM NashvilleHousing



UPDATE NashvilleHousing
SET SoldAsVacant = CASE SoldAsVacant
	WHEN 'Y' THEN 'Yes'
	WHEN 'N' THEN 'No'
	ELSE SoldAsVacant
	END




-- Remove duplicates -----------------------------------------------------------------------------------------------------

WITH RowNum as (
Select *,
	ROW_NUMBER() over (
	partition by ParcelID,
				 LegalReference,
				 SalePrice,
				 SaleDateConverted,
				 PropertyAddress_ok,
				 OwnerAddress_ok
				 ORDER BY ParcelID
				 ) row_num
From NashvilleHousing
)
DELETE
From RowNum
Where row_num > 1





-- Let's delete some columns that are not so useful ---------------------------------------------------------------------------------------------

ALTER TABLE NashvilleHousing
DROP COLUMN OwnerAddress

ALTER TABLE NashvilleHousing
DROP COLUMN TaxDistrict

ALTER TABLE NashvilleHousing
DROP COLUMN SaleDate

ALTER TABLE NashvilleHousing
DROP COLUMN PropertyAddress














