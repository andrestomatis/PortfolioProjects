
-- This is a data cleaning process for the Nashville Housing Dataset with SQL queries

-- Let's take a look at our data

SELECT *
FROM `Nashville_Housing.housing`


-- Standarize date format 

UPDATE `Nashville_Housing.housing`
SET SaleDateConverted = cast(SaleDate as date)
WHERE UniqueID_ > 0    
-- GCP asks me to use a WHERE clause to make an update
-------------------------------------------------------------------------------------

-- Populate property address data

SELECT 
  PropertyAddress
FROM
  `Nashville_Housing.housing`

SELECT 
  PropertyAddress
FROM
  `Nashville_Housing.housing`
WHERE PropertyAddress IS NULL
-- There are a lot of null values


SELECT 
  a.ParcelID, a.PropertyAddress,
  b.ParcelID, b.PropertyAddress
FROM
  `Nashville_Housing.housing` a 
  join `Nashville_Housing.housing` b 
  on a.ParcelID = b.ParcelID
  and a.UniqueID_ <> b.UniqueID_  
WHERE a.PropertyAddress IS NULL


UPDATE `Nashville_Housing.housing`
SET PropertyAddress = ifnull(a.PropertyAddress,b.PropertyAddress)
FROM `Nashville_Housing.housing` a
JOIN `Nashville_Housing.housing` b
  on a.ParcelID = b.ParcelID
  and a.UniqueID_ <> b.UniqueID_ 
WHERE a.PropertyAddress is null

-------------------------------------------------------------------------------------

-- Breaking out PropertyAddress into individual columns

SELECT
  split(PropertyAddress, ',')[offset(0)] as address,
  split(PropertyAddress, ',')[offset(1)] as city
FROM `Nashville_Housing.housing`

ALTER TABLE `Nashville_Housing.housing`
ADD COLUMN Property_Address string(200)

UPDATE `Nashville_Housing.housing`
SET Property_Address = split(PropertyAddress, ',')[offset(0)] 
WHERE 1=1

ALTER TABLE `Nashville_Housing.housing`
ADD COLUMN Property_City string(200)

UPDATE `Nashville_Housing.housing`
SET Property_City = split(PropertyAddress, ',')[offset(1)] 
WHERE 1=1

SELECT *
FROM `Nashville_Housing.housing`

-------------------------------------------------------------------------------------

-- Breaking out OwnerAddress into individual columns

SELECT
  split(OwnerAddress, ',')[offset(0)] as address,
  split(OwnerAddress, ',')[offset(1)] as city,
  split(OwnerAddress, ',')[offset(2)] as state
FROM `Nashville_Housing.housing`

ALTER TABLE `Nashville_Housing.housing`
ADD COLUMN Owner_Address string(200)

UPDATE `Nashville_Housing.housing`
SET Owner_Address = split(OwnerAddress, ',')[offset(0)] 
WHERE 1=1

ALTER TABLE `Nashville_Housing.housing`
ADD COLUMN Owner_City string(200)

UPDATE `Nashville_Housing.housing`
SET Owner_City = split(OwnerAddress, ',')[offset(1)] 
WHERE 1=1

ALTER TABLE `Nashville_Housing.housing`
ADD COLUMN Owner_State string(200)

UPDATE `Nashville_Housing.housing`
SET Owner_State = split(OwnerAddress, ',')[offset(2)] 
WHERE 1=1

SELECT *
FROM `Nashville_Housing.housing`

-------------------------------------------------------------------------------------

-- Standarize values in the SoldAsVacant column 

SELECT distinct(SoldAsVacant), count(SoldAsVacant)
FROM Nashville_Housing.housing
GROUP BY 1
ORDER BY 2


SELECT SoldAsVacant,
  CASE WHEN SoldAsVacant = 'Y' THEN 'YES'
       WHEN SoldAsVacant = 'N' THEN 'NO'
       ELSE SoldAsVacant
       END
FROM `Nashville_Housing.housing`


UPDATE `Nashville_Housing.housing`
SET SoldAsVacant =
  CASE WHEN SoldAsVacant = 'Y' THEN 'YES'
       WHEN SoldAsVacant = 'N' THEN 'NO'
       ELSE SoldAsVacant
       END
WHERE 1=1
-------------------------------------------------------------------------------------

-- Let's remove duplicates

WITH RowNumber as (
SELECT *, 
  row_number() over(
    partition by  ParcelID,
                  PropertyAddress,
                  SaleDate,
                  Saleprice,
                  LegalReference,
                  LandUse,
                  LandValue
                  order by UniqueID_) as row_num
FROM `Nashville_Housing.housing` )
SELECT *
FROM RowNumber
WHERE row_num > 1


DELETE `Nashville_Housing.housing` 
WHERE UniqueID_ IN 
(SELECT UniqueID_ from (WITH RowNumber as (
SELECT *, 
  row_number() over(
    partition by  ParcelID,
                  PropertyAddress,
                  SaleDate,
                  Saleprice,
                  LegalReference,
                  LandUse,
                  LandValue
                  order by UniqueID_) as row
FROM `Nashville_Housing.housing` )
SELECT *
FROM RowNumber 
WHERE row > 1))

-------------------------------------------------------------------------------------


-- Let's delete some columns that are not so useful

ALTER TABLE Nashville_Housing.housing
DROP COLUMN OwnerAddress

ALTER TABLE Nashville_Housing.housing
DROP COLUMN TaxDistrict

ALTER TABLE Nashville_Housing.housing
DROP COLUMN SaleDate

ALTER TABLE Nashville_Housing.housing
DROP COLUMN PropertyAddress














